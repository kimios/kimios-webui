/**
 * Kimios API
 * Kimios Sample API
 *
 * OpenAPI spec version: 1.3-SNAPSHOT - 060527aa7377af83c5d622370343fc4fa7da64a7
 * Contact: documentation@kimios.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { CommentWrapper } from '../model/commentWrapper';
import { DMEntity } from '../model/dMEntity';
import { Document } from '../model/document';
import { InputStream } from '../model/inputStream';
import { ProcessWrapper } from '../model/processWrapper';
import { SearchRequest } from '../model/searchRequest';
import { SearchResponse } from '../model/searchResponse';
import { TasksResponse } from '../model/tasksResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import {Criteria} from '..';


@Injectable()
export class SearchService {

    protected basePath = 'http://localhost/rest/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sessionId 
     * @param taskId 
     * @param comment 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addComment(sessionId?: string, taskId?: number, comment?: string, observe?: 'body', reportProgress?: boolean): Observable<CommentWrapper>;
    public addComment(sessionId?: string, taskId?: number, comment?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CommentWrapper>>;
    public addComment(sessionId?: string, taskId?: number, comment?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CommentWrapper>>;
    public addComment(sessionId?: string, taskId?: number, comment?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }
        if (comment !== undefined && comment !== null) {
            queryParameters = queryParameters.set('comment', <any>comment);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<CommentWrapper>(`${this.basePath}/tasks/addComment`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public advancedSaveSearchQuery(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public advancedSaveSearchQuery(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public advancedSaveSearchQuery(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public advancedSaveSearchQuery(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<number>(`${this.basePath}/search/advancedSaveSearchQuery`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param xmlStream 
     * @param dmEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public advancedSearch(sessionId?: string, xmlStream?: string, dmEntityId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Document>>;
    public advancedSearch(sessionId?: string, xmlStream?: string, dmEntityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Document>>>;
    public advancedSearch(sessionId?: string, xmlStream?: string, dmEntityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Document>>>;
    public advancedSearch(sessionId?: string, xmlStream?: string, dmEntityId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (xmlStream !== undefined && xmlStream !== null) {
            queryParameters = queryParameters.set('xmlStream', <any>xmlStream);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Document>>(`${this.basePath}/search/advancedSearch`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param start 
     * @param pageSize 
     * @param sortField 
     * @param sortDir 
     * @param virtualPath 
     * @param requestId 
     * @param mustSave 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public advancedSearchDocuments(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, mustSave?: boolean, criterias?: Criteria[], observe?: 'body', reportProgress?: boolean): Observable<SearchResponse>;
    public advancedSearchDocuments(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, mustSave?: boolean, criterias?: Criteria[], observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchResponse>>;
    public advancedSearchDocuments(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, mustSave?: boolean, criterias?: Criteria[], observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchResponse>>;
    public advancedSearchDocuments(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, mustSave?: boolean, criterias?: Criteria[], observe: any = 'body', reportProgress: boolean = false ): Observable<any> {









        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sortField !== undefined && sortField !== null) {
            queryParameters = queryParameters.set('sortField', <any>sortField);
        }
        if (sortDir !== undefined && sortDir !== null) {
            queryParameters = queryParameters.set('sortDir', <any>sortDir);
        }
        if (virtualPath !== undefined && virtualPath !== null) {
            queryParameters = queryParameters.set('virtualPath', <any>virtualPath);
        }
        if (requestId !== undefined && requestId !== null) {
            queryParameters = queryParameters.set('requestId', <any>requestId);
        }
        if (mustSave !== undefined && mustSave !== null) {
            queryParameters = queryParameters.set('mustSave', <any>mustSave);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<SearchResponse>(`${this.basePath}/search/advancedSearchDocument`,
            criterias,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param start 
     * @param pageSize 
     * @param sortField 
     * @param sortDir 
     * @param virtualPath 
     * @param requestId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public advancedSearchDocumentsExport(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, observe?: 'body', reportProgress?: boolean): Observable<InputStream>;
    public advancedSearchDocumentsExport(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InputStream>>;
    public advancedSearchDocumentsExport(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InputStream>>;
    public advancedSearchDocumentsExport(sessionId?: string, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, requestId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sortField !== undefined && sortField !== null) {
            queryParameters = queryParameters.set('sortField', <any>sortField);
        }
        if (sortDir !== undefined && sortDir !== null) {
            queryParameters = queryParameters.set('sortDir', <any>sortDir);
        }
        if (virtualPath !== undefined && virtualPath !== null) {
            queryParameters = queryParameters.set('virtualPath', <any>virtualPath);
        }
        if (requestId !== undefined && requestId !== null) {
            queryParameters = queryParameters.set('requestId', <any>requestId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/csv'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<InputStream>(`${this.basePath}/search/advanced/csv`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param searchQueryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteSearchQuery(sessionId?: string, searchQueryId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteSearchQuery(sessionId?: string, searchQueryId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteSearchQuery(sessionId?: string, searchQueryId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteSearchQuery(sessionId?: string, searchQueryId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (searchQueryId !== undefined && searchQueryId !== null) {
            queryParameters = queryParameters.set('searchQueryId', <any>searchQueryId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/search/deleteSearchQuery`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param searchQueryId 
     * @param start 
     * @param pageSize 
     * @param sortField 
     * @param sortDir 
     * @param virtualPath 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public executeSearchQuery(sessionId?: string, searchQueryId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchResponse>;
    public executeSearchQuery(sessionId?: string, searchQueryId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchResponse>>;
    public executeSearchQuery(sessionId?: string, searchQueryId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchResponse>>;
    public executeSearchQuery(sessionId?: string, searchQueryId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, virtualPath?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (searchQueryId !== undefined && searchQueryId !== null) {
            queryParameters = queryParameters.set('searchQueryId', <any>searchQueryId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sortField !== undefined && sortField !== null) {
            queryParameters = queryParameters.set('sortField', <any>sortField);
        }
        if (sortDir !== undefined && sortDir !== null) {
            queryParameters = queryParameters.set('sortDir', <any>sortDir);
        }
        if (virtualPath !== undefined && virtualPath !== null) {
            queryParameters = queryParameters.set('virtualPath', <any>virtualPath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SearchResponse>(`${this.basePath}/search/executeSearchQuery`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param start 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssignedTasks(sessionId?: string, start?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<TasksResponse>;
    public getAssignedTasks(sessionId?: string, start?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TasksResponse>>;
    public getAssignedTasks(sessionId?: string, start?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TasksResponse>>;
    public getAssignedTasks(sessionId?: string, start?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TasksResponse>(`${this.basePath}/tasks/getAssignedTasks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getComments(sessionId?: string, taskId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<CommentWrapper>>;
    public getComments(sessionId?: string, taskId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<CommentWrapper>>>;
    public getComments(sessionId?: string, taskId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<CommentWrapper>>>;
    public getComments(sessionId?: string, taskId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<CommentWrapper>>(`${this.basePath}/tasks/getComments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param path 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDMentityFromPath(sessionId?: string, path?: string, observe?: 'body', reportProgress?: boolean): Observable<DMEntity>;
    public getDMentityFromPath(sessionId?: string, path?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DMEntity>>;
    public getDMentityFromPath(sessionId?: string, path?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DMEntity>>;
    public getDMentityFromPath(sessionId?: string, path?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DMEntity>(`${this.basePath}/search/getDMentityFromPath`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPathFromDMEntity(sessionId?: string, entityId?: number, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getPathFromDMEntity(sessionId?: string, entityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getPathFromDMEntity(sessionId?: string, entityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getPathFromDMEntity(sessionId?: string, entityId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/search/getPathFromDMEntity`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param start 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPendingTasks(sessionId?: string, start?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<TasksResponse>;
    public getPendingTasks(sessionId?: string, start?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TasksResponse>>;
    public getPendingTasks(sessionId?: string, start?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TasksResponse>>;
    public getPendingTasks(sessionId?: string, start?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TasksResponse>(`${this.basePath}/processes/getPendingTasks`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProcesses(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ProcessWrapper>>;
    public getProcesses(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProcessWrapper>>>;
    public getProcesses(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProcessWrapper>>>;
    public getProcesses(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<ProcessWrapper>>(`${this.basePath}/processes/getProcesses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param processInstanceId 
     * @param start 
     * @param limit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTasksByInstance(sessionId?: string, processInstanceId?: number, start?: number, limit?: number, observe?: 'body', reportProgress?: boolean): Observable<TasksResponse>;
    public getTasksByInstance(sessionId?: string, processInstanceId?: number, start?: number, limit?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TasksResponse>>;
    public getTasksByInstance(sessionId?: string, processInstanceId?: number, start?: number, limit?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TasksResponse>>;
    public getTasksByInstance(sessionId?: string, processInstanceId?: number, start?: number, limit?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (processInstanceId !== undefined && processInstanceId !== null) {
            queryParameters = queryParameters.set('processInstanceId', <any>processInstanceId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<TasksResponse>(`${this.basePath}/tasks/getTasksByInstance`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hideTask(sessionId?: string, taskId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public hideTask(sessionId?: string, taskId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public hideTask(sessionId?: string, taskId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public hideTask(sessionId?: string, taskId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/tasks/hideTask`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listAvailableSearchFields(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public listAvailableSearchFields(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public listAvailableSearchFields(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public listAvailableSearchFields(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/search/listFields`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listMySearchQueries(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SearchRequest>>;
    public listMySearchQueries(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SearchRequest>>>;
    public listMySearchQueries(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SearchRequest>>>;
    public listMySearchQueries(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SearchRequest>>(`${this.basePath}/search/listMySearchQueries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listPublicSearchQueries(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SearchRequest>>;
    public listPublicSearchQueries(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SearchRequest>>>;
    public listPublicSearchQueries(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SearchRequest>>>;
    public listPublicSearchQueries(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SearchRequest>>(`${this.basePath}/search/listPublicSearchQueries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listSearchQueries(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SearchRequest>>;
    public listSearchQueries(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SearchRequest>>>;
    public listSearchQueries(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SearchRequest>>>;
    public listSearchQueries(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SearchRequest>>(`${this.basePath}/search/listSearchQueries`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param searchQueryId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public loadSearchQuery(sessionId?: string, searchQueryId?: number, observe?: 'body', reportProgress?: boolean): Observable<SearchRequest>;
    public loadSearchQuery(sessionId?: string, searchQueryId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchRequest>>;
    public loadSearchQuery(sessionId?: string, searchQueryId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchRequest>>;
    public loadSearchQuery(sessionId?: string, searchQueryId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (searchQueryId !== undefined && searchQueryId !== null) {
            queryParameters = queryParameters.set('searchQueryId', <any>searchQueryId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SearchRequest>(`${this.basePath}/search/loadSearchQuery`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param query 
     * @param dmEntityId 
     * @param start 
     * @param pageSize 
     * @param sortField 
     * @param sortDir 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quickSearch(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe?: 'body', reportProgress?: boolean): Observable<SearchResponse>;
    public quickSearch(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SearchResponse>>;
    public quickSearch(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SearchResponse>>;
    public quickSearch(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sortField !== undefined && sortField !== null) {
            queryParameters = queryParameters.set('sortField', <any>sortField);
        }
        if (sortDir !== undefined && sortDir !== null) {
            queryParameters = queryParameters.set('sortDir', <any>sortDir);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<SearchResponse>(`${this.basePath}/search/quickSearch`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param query 
     * @param dmEntityId 
     * @param start 
     * @param pageSize 
     * @param sortField 
     * @param sortDir 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quickSearchExport(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe?: 'body', reportProgress?: boolean): Observable<InputStream>;
    public quickSearchExport(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InputStream>>;
    public quickSearchExport(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InputStream>>;
    public quickSearchExport(sessionId?: string, query?: string, dmEntityId?: number, start?: number, pageSize?: number, sortField?: string, sortDir?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (query !== undefined && query !== null) {
            queryParameters = queryParameters.set('query', <any>query);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (sortField !== undefined && sortField !== null) {
            queryParameters = queryParameters.set('sortField', <any>sortField);
        }
        if (sortDir !== undefined && sortDir !== null) {
            queryParameters = queryParameters.set('sortDir', <any>sortDir);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/csv'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<InputStream>(`${this.basePath}/search/quick/csv`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public releaseTask(sessionId?: string, taskId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public releaseTask(sessionId?: string, taskId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public releaseTask(sessionId?: string, taskId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public releaseTask(sessionId?: string, taskId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/tasks/releaseTask`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param id 
     * @param name 
     * @param sortField 
     * @param sortDir 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveSearchQuery(sessionId?: string, id?: number, name?: string, sortField?: string, sortDir?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public saveSearchQuery(sessionId?: string, id?: number, name?: string, sortField?: string, sortDir?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public saveSearchQuery(sessionId?: string, id?: number, name?: string, sortField?: string, sortDir?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public saveSearchQuery(sessionId?: string, id?: number, name?: string, sortField?: string, sortDir?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (sortField !== undefined && sortField !== null) {
            queryParameters = queryParameters.set('sortField', <any>sortField);
        }
        if (sortDir !== undefined && sortDir !== null) {
            queryParameters = queryParameters.set('sortDir', <any>sortDir);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/search/saveSearchQuery`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param taskId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public takeTask(sessionId?: string, taskId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public takeTask(sessionId?: string, taskId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public takeTask(sessionId?: string, taskId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public takeTask(sessionId?: string, taskId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (taskId !== undefined && taskId !== null) {
            queryParameters = queryParameters.set('taskId', <any>taskId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/tasks/takeTask`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
