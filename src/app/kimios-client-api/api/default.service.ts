/**
 * Kimios API
 * Kimios Sample API
 *
 * OpenAPI spec version: 1.2.2-SNAPSHOT - 5f6a4372e643efa3abc97a7070cf07d4bb09747d
 * Contact: documentation@kimios.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DMEntity } from '../model/dMEntity';
import { DMEntityAttribute } from '../model/dMEntityAttribute';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'http://localhost/rest/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canHandleAutomaticPathDeposit(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public canHandleAutomaticPathDeposit(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public canHandleAutomaticPathDeposit(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public canHandleAutomaticPathDeposit(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/extension/canHandleAutomaticPathDeposit`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userId 
     * @param userSource 
     * @param sendMail 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generatePasswordForUser(sessionId?: string, userId?: string, userSource?: string, sendMail?: boolean, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public generatePasswordForUser(sessionId?: string, userId?: string, userSource?: string, sendMail?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public generatePasswordForUser(sessionId?: string, userId?: string, userSource?: string, sendMail?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public generatePasswordForUser(sessionId?: string, userId?: string, userSource?: string, sendMail?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }
        if (sendMail !== undefined && sendMail !== null) {
            queryParameters = queryParameters.set('sendMail', <any>sendMail);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/extension/generatePasswordForUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param attributeName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'body', reportProgress?: boolean): Observable<DMEntityAttribute>;
    public getEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DMEntityAttribute>>;
    public getEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DMEntityAttribute>>;
    public getEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (attributeName !== undefined && attributeName !== null) {
            queryParameters = queryParameters.set('attributeName', <any>attributeName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DMEntityAttribute>(`${this.basePath}/extension/getEntityAttribute`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param attributeName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEntityAttributeValue(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getEntityAttributeValue(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getEntityAttributeValue(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getEntityAttributeValue(sessionId?: string, dmEntityId?: number, attributeName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (attributeName !== undefined && attributeName !== null) {
            queryParameters = queryParameters.set('attributeName', <any>attributeName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/extension/getEntityAttributeValue`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param attributeName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEntityAttributes(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DMEntityAttribute>>;
    public getEntityAttributes(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DMEntityAttribute>>>;
    public getEntityAttributes(sessionId?: string, dmEntityId?: number, attributeName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DMEntityAttribute>>>;
    public getEntityAttributes(sessionId?: string, dmEntityId?: number, attributeName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (attributeName !== undefined && attributeName !== null) {
            queryParameters = queryParameters.set('attributeName', <any>attributeName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DMEntityAttribute>>(`${this.basePath}/extension/getEntityAttributes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param extensionType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listExtensions(sessionId?: string, extensionType?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public listExtensions(sessionId?: string, extensionType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public listExtensions(sessionId?: string, extensionType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public listExtensions(sessionId?: string, extensionType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (extensionType !== undefined && extensionType !== null) {
            queryParameters = queryParameters.set('extensionType', <any>extensionType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/extension/list-extensions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public restoreFromTrash(sessionId?: string, dmEntityId?: number, observe?: 'body', reportProgress?: boolean): Observable<DMEntity>;
    public restoreFromTrash(sessionId?: string, dmEntityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DMEntity>>;
    public restoreFromTrash(sessionId?: string, dmEntityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DMEntity>>;
    public restoreFromTrash(sessionId?: string, dmEntityId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DMEntity>(`${this.basePath}/extension/restoreFromTrash`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param folderId 
     * @param folderName 
     * @param parentId 
     * @param isSecurityInherited 
     * @param documentTypeId 
     * @param metaItemsJsonString 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveVirtualFolder(sessionId?: string, folderId?: number, folderName?: string, parentId?: number, isSecurityInherited?: boolean, documentTypeId?: number, metaItemsJsonString?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public saveVirtualFolder(sessionId?: string, folderId?: number, folderName?: string, parentId?: number, isSecurityInherited?: boolean, documentTypeId?: number, metaItemsJsonString?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public saveVirtualFolder(sessionId?: string, folderId?: number, folderName?: string, parentId?: number, isSecurityInherited?: boolean, documentTypeId?: number, metaItemsJsonString?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public saveVirtualFolder(sessionId?: string, folderId?: number, folderName?: string, parentId?: number, isSecurityInherited?: boolean, documentTypeId?: number, metaItemsJsonString?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (folderId !== undefined && folderId !== null) {
            queryParameters = queryParameters.set('folderId', <any>folderId);
        }
        if (folderName !== undefined && folderName !== null) {
            queryParameters = queryParameters.set('folderName', <any>folderName);
        }
        if (parentId !== undefined && parentId !== null) {
            queryParameters = queryParameters.set('parentId', <any>parentId);
        }
        if (isSecurityInherited !== undefined && isSecurityInherited !== null) {
            queryParameters = queryParameters.set('isSecurityInherited', <any>isSecurityInherited);
        }
        if (documentTypeId !== undefined && documentTypeId !== null) {
            queryParameters = queryParameters.set('documentTypeId', <any>documentTypeId);
        }
        if (metaItemsJsonString !== undefined && metaItemsJsonString !== null) {
            queryParameters = queryParameters.set('metaItemsJsonString', <any>metaItemsJsonString);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/extension/createVirtualFolder`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param attributeName 
     * @param attributeValue 
     * @param isIndexed 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, attributeValue?: string, isIndexed?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, attributeValue?: string, isIndexed?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, attributeValue?: string, isIndexed?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setEntityAttribute(sessionId?: string, dmEntityId?: number, attributeName?: string, attributeValue?: string, isIndexed?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (attributeName !== undefined && attributeName !== null) {
            queryParameters = queryParameters.set('attributeName', <any>attributeName);
        }
        if (attributeValue !== undefined && attributeValue !== null) {
            queryParameters = queryParameters.set('attributeValue', <any>attributeValue);
        }
        if (isIndexed !== undefined && isIndexed !== null) {
            queryParameters = queryParameters.set('isIndexed', <any>isIndexed);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/extension/setEntityAttribute`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param force 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public trashEntity(sessionId?: string, dmEntityId?: number, force?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public trashEntity(sessionId?: string, dmEntityId?: number, force?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public trashEntity(sessionId?: string, dmEntityId?: number, force?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public trashEntity(sessionId?: string, dmEntityId?: number, force?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (force !== undefined && force !== null) {
            queryParameters = queryParameters.set('force', <any>force);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/extension/trash`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param start 
     * @param count 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public viewTrash(sessionId?: string, start?: number, count?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DMEntity>>;
    public viewTrash(sessionId?: string, start?: number, count?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DMEntity>>>;
    public viewTrash(sessionId?: string, start?: number, count?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DMEntity>>>;
    public viewTrash(sessionId?: string, start?: number, count?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (start !== undefined && start !== null) {
            queryParameters = queryParameters.set('start', <any>start);
        }
        if (count !== undefined && count !== null) {
            queryParameters = queryParameters.set('count', <any>count);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DMEntity>>(`${this.basePath}/extension/listTrash`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
