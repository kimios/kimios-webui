/**
 * Kimios API
 * Kimios Sample API
 *
 * OpenAPI spec version: 1.2.2-SNAPSHOT - 73e8d1925ff0716b0a39dff428b76dec7209db16
 * Contact: documentation@kimios.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { DocumentType } from '../model/documentType';
import { MetaFeed } from '../model/metaFeed';
import { Workflow } from '../model/workflow';
import { WorkflowStatus } from '../model/workflowStatus';
import { WorkflowStatusManager } from '../model/workflowStatusManager';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StudioService {

    protected basePath = 'http://localhost/rest/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sessionId 
     * @param xmlStream 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDocumentType(sessionId?: string, xmlStream?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createDocumentType(sessionId?: string, xmlStream?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createDocumentType(sessionId?: string, xmlStream?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createDocumentType(sessionId?: string, xmlStream?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (xmlStream !== undefined && xmlStream !== null) {
            queryParameters = queryParameters.set('xmlStream', <any>xmlStream);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/createDocumentType`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param name 
     * @param className 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMetaFeed(sessionId?: string, name?: string, className?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createMetaFeed(sessionId?: string, name?: string, className?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createMetaFeed(sessionId?: string, name?: string, className?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createMetaFeed(sessionId?: string, name?: string, className?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/studio/createMetaFeed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param tagName 
     * @param docTypeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTag(sessionId: string, tagName: string, docTypeId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createTag(sessionId: string, tagName: string, docTypeId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createTag(sessionId: string, tagName: string, docTypeId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createTag(sessionId: string, tagName: string, docTypeId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sessionId === null || sessionId === undefined) {
            throw new Error('Required parameter sessionId was null or undefined when calling createTag.');
        }

        if (tagName === null || tagName === undefined) {
            throw new Error('Required parameter tagName was null or undefined when calling createTag.');
        }

        if (docTypeId === null || docTypeId === undefined) {
            throw new Error('Required parameter docTypeId was null or undefined when calling createTag.');
        }

        const formData = new FormData();
        formData.append('sessionId', sessionId);
        formData.append('tagName', tagName);
        formData.append('docTypeId', docTypeId.toString());

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            // 'multipart/form-data'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/studio/createTag`,
            formData,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param name 
     * @param automaticRestart 
     * @param description 
     * @param xmlStream 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createWorkflow(sessionId?: string, name?: string, automaticRestart?: boolean, description?: string, xmlStream?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createWorkflow(sessionId?: string, name?: string, automaticRestart?: boolean, description?: string, xmlStream?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createWorkflow(sessionId?: string, name?: string, automaticRestart?: boolean, description?: string, xmlStream?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createWorkflow(sessionId?: string, name?: string, automaticRestart?: boolean, description?: string, xmlStream?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (automaticRestart !== undefined && automaticRestart !== null) {
            queryParameters = queryParameters.set('automaticRestart', <any>automaticRestart);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (xmlStream !== undefined && xmlStream !== null) {
            queryParameters = queryParameters.set('xmlStream', <any>xmlStream);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/studio/createWorkflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowId 
     * @param name 
     * @param successorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createWorkflowStatus(sessionId?: string, workflowId?: number, name?: string, successorId?: number, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public createWorkflowStatus(sessionId?: string, workflowId?: number, name?: string, successorId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public createWorkflowStatus(sessionId?: string, workflowId?: number, name?: string, successorId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public createWorkflowStatus(sessionId?: string, workflowId?: number, name?: string, successorId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowId !== undefined && workflowId !== null) {
            queryParameters = queryParameters.set('workflowId', <any>workflowId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (successorId !== undefined && successorId !== null) {
            queryParameters = queryParameters.set('successorId', <any>successorId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/studio/createWorkflowStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowStatusId 
     * @param securityEntityName 
     * @param securityEntitySource 
     * @param securityEntityType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowStatusId !== undefined && workflowStatusId !== null) {
            queryParameters = queryParameters.set('workflowStatusId', <any>workflowStatusId);
        }
        if (securityEntityName !== undefined && securityEntityName !== null) {
            queryParameters = queryParameters.set('securityEntityName', <any>securityEntityName);
        }
        if (securityEntitySource !== undefined && securityEntitySource !== null) {
            queryParameters = queryParameters.set('securityEntitySource', <any>securityEntitySource);
        }
        if (securityEntityType !== undefined && securityEntityType !== null) {
            queryParameters = queryParameters.set('securityEntityType', <any>securityEntityType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/createWorkflowStatusManager`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param documentTypeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteDocumentType(sessionId?: string, documentTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteDocumentType(sessionId?: string, documentTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteDocumentType(sessionId?: string, documentTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteDocumentType(sessionId?: string, documentTypeId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (documentTypeId !== undefined && documentTypeId !== null) {
            queryParameters = queryParameters.set('documentTypeId', <any>documentTypeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/deleteDocumentType`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param metaFeedId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteMetaFeed(sessionId?: string, metaFeedId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteMetaFeed(sessionId?: string, metaFeedId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteMetaFeed(sessionId?: string, metaFeedId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteMetaFeed(sessionId?: string, metaFeedId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (metaFeedId !== undefined && metaFeedId !== null) {
            queryParameters = queryParameters.set('metaFeedId', <any>metaFeedId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/deleteMetaFeed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflow(sessionId?: string, workflowId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWorkflow(sessionId?: string, workflowId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWorkflow(sessionId?: string, workflowId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWorkflow(sessionId?: string, workflowId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowId !== undefined && workflowId !== null) {
            queryParameters = queryParameters.set('workflowId', <any>workflowId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/deleteWorkflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowStatusId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowStatusId !== undefined && workflowStatusId !== null) {
            queryParameters = queryParameters.set('workflowStatusId', <any>workflowStatusId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/deleteWorkflowStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowStatusId 
     * @param securityEntityName 
     * @param securityEntitySource 
     * @param securityEntityType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteWorkflowStatusManager(sessionId?: string, workflowStatusId?: number, securityEntityName?: string, securityEntitySource?: string, securityEntityType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowStatusId !== undefined && workflowStatusId !== null) {
            queryParameters = queryParameters.set('workflowStatusId', <any>workflowStatusId);
        }
        if (securityEntityName !== undefined && securityEntityName !== null) {
            queryParameters = queryParameters.set('securityEntityName', <any>securityEntityName);
        }
        if (securityEntitySource !== undefined && securityEntitySource !== null) {
            queryParameters = queryParameters.set('securityEntitySource', <any>securityEntitySource);
        }
        if (securityEntityType !== undefined && securityEntityType !== null) {
            queryParameters = queryParameters.set('securityEntityType', <any>securityEntityType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/deleteWorkflowStatusManager`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableMetaFeeds(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getAvailableMetaFeeds(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getAvailableMetaFeeds(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getAvailableMetaFeeds(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/studio/getAvailableMetaFeeds`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param documentTypeId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentType(documentTypeId?: number, observe?: 'body', reportProgress?: boolean): Observable<DocumentType>;
    public getDocumentType(documentTypeId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<DocumentType>>;
    public getDocumentType(documentTypeId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<DocumentType>>;
    public getDocumentType(documentTypeId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (documentTypeId !== undefined && documentTypeId !== null) {
            queryParameters = queryParameters.set('documentTypeId', <any>documentTypeId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<DocumentType>(`${this.basePath}/studio/getDocumentType`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDocumentTypes(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DocumentType>>;
    public getDocumentTypes(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DocumentType>>>;
    public getDocumentTypes(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DocumentType>>>;
    public getDocumentTypes(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DocumentType>>(`${this.basePath}/studio/getDocumentTypes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param metaFeedId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMetaFeed(sessionId?: string, metaFeedId?: number, observe?: 'body', reportProgress?: boolean): Observable<MetaFeed>;
    public getMetaFeed(sessionId?: string, metaFeedId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<MetaFeed>>;
    public getMetaFeed(sessionId?: string, metaFeedId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<MetaFeed>>;
    public getMetaFeed(sessionId?: string, metaFeedId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (metaFeedId !== undefined && metaFeedId !== null) {
            queryParameters = queryParameters.set('metaFeedId', <any>metaFeedId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<MetaFeed>(`${this.basePath}/studio/getMetaFeed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param metaFeedId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMetaFeedValues(sessionId?: string, metaFeedId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getMetaFeedValues(sessionId?: string, metaFeedId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getMetaFeedValues(sessionId?: string, metaFeedId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getMetaFeedValues(sessionId?: string, metaFeedId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (metaFeedId !== undefined && metaFeedId !== null) {
            queryParameters = queryParameters.set('metaFeedId', <any>metaFeedId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/studio/getMetaFeedValues`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getMetaFeeds(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<MetaFeed>>;
    public getMetaFeeds(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<MetaFeed>>>;
    public getMetaFeeds(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<MetaFeed>>>;
    public getMetaFeeds(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<MetaFeed>>(`${this.basePath}/studio/getMetaFeeds`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflow(sessionId?: string, workflowId?: number, observe?: 'body', reportProgress?: boolean): Observable<Workflow>;
    public getWorkflow(sessionId?: string, workflowId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Workflow>>;
    public getWorkflow(sessionId?: string, workflowId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Workflow>>;
    public getWorkflow(sessionId?: string, workflowId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowId !== undefined && workflowId !== null) {
            queryParameters = queryParameters.set('workflowId', <any>workflowId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Workflow>(`${this.basePath}/studio/getWorkflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowStatusId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe?: 'body', reportProgress?: boolean): Observable<WorkflowStatus>;
    public getWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<WorkflowStatus>>;
    public getWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<WorkflowStatus>>;
    public getWorkflowStatus(sessionId?: string, workflowStatusId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowStatusId !== undefined && workflowStatusId !== null) {
            queryParameters = queryParameters.set('workflowStatusId', <any>workflowStatusId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<WorkflowStatus>(`${this.basePath}/studio/getWorkflowStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowStatusId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowStatusManagers(sessionId?: string, workflowStatusId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<WorkflowStatusManager>>;
    public getWorkflowStatusManagers(sessionId?: string, workflowStatusId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WorkflowStatusManager>>>;
    public getWorkflowStatusManagers(sessionId?: string, workflowStatusId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WorkflowStatusManager>>>;
    public getWorkflowStatusManagers(sessionId?: string, workflowStatusId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowStatusId !== undefined && workflowStatusId !== null) {
            queryParameters = queryParameters.set('workflowStatusId', <any>workflowStatusId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<WorkflowStatusManager>>(`${this.basePath}/studio/getWorkflowStatusManagers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflowStatuses(sessionId?: string, workflowId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<WorkflowStatus>>;
    public getWorkflowStatuses(sessionId?: string, workflowId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<WorkflowStatus>>>;
    public getWorkflowStatuses(sessionId?: string, workflowId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<WorkflowStatus>>>;
    public getWorkflowStatuses(sessionId?: string, workflowId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowId !== undefined && workflowId !== null) {
            queryParameters = queryParameters.set('workflowId', <any>workflowId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<WorkflowStatus>>(`${this.basePath}/studio/getWorkflowStatuses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWorkflows(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Workflow>>;
    public getWorkflows(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Workflow>>>;
    public getWorkflows(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Workflow>>>;
    public getWorkflows(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Workflow>>(`${this.basePath}/studio/getWorkflows`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param metaFeedId 
     * @param criteria 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchMetaFeedValues(sessionId?: string, metaFeedId?: number, criteria?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public searchMetaFeedValues(sessionId?: string, metaFeedId?: number, criteria?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public searchMetaFeedValues(sessionId?: string, metaFeedId?: number, criteria?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public searchMetaFeedValues(sessionId?: string, metaFeedId?: number, criteria?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (metaFeedId !== undefined && metaFeedId !== null) {
            queryParameters = queryParameters.set('metaFeedId', <any>metaFeedId);
        }
        if (criteria !== undefined && criteria !== null) {
            queryParameters = queryParameters.set('criteria', <any>criteria);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/studio/searchMetaFeedValues`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param xmlStream 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDocumentType(sessionId?: string, xmlStream?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateDocumentType(sessionId?: string, xmlStream?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateDocumentType(sessionId?: string, xmlStream?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateDocumentType(sessionId?: string, xmlStream?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (xmlStream !== undefined && xmlStream !== null) {
            queryParameters = queryParameters.set('xmlStream', <any>xmlStream);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/updateDocumentType`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param xmlStream 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateEnumerationValues(sessionId?: string, xmlStream?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateEnumerationValues(sessionId?: string, xmlStream?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateEnumerationValues(sessionId?: string, xmlStream?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateEnumerationValues(sessionId?: string, xmlStream?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (xmlStream !== undefined && xmlStream !== null) {
            queryParameters = queryParameters.set('xmlStream', <any>xmlStream);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/updateEnumerationValues`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param metaFeedId 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateMetaFeed(sessionId?: string, metaFeedId?: number, name?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateMetaFeed(sessionId?: string, metaFeedId?: number, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateMetaFeed(sessionId?: string, metaFeedId?: number, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateMetaFeed(sessionId?: string, metaFeedId?: number, name?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (metaFeedId !== undefined && metaFeedId !== null) {
            queryParameters = queryParameters.set('metaFeedId', <any>metaFeedId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/updateMetaFeed`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowId 
     * @param name 
     * @param description 
     * @param automaticRestart 
     * @param xmlStream 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWorkflow(sessionId?: string, workflowId?: number, name?: string, description?: string, automaticRestart?: boolean, xmlStream?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateWorkflow(sessionId?: string, workflowId?: number, name?: string, description?: string, automaticRestart?: boolean, xmlStream?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateWorkflow(sessionId?: string, workflowId?: number, name?: string, description?: string, automaticRestart?: boolean, xmlStream?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateWorkflow(sessionId?: string, workflowId?: number, name?: string, description?: string, automaticRestart?: boolean, xmlStream?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowId !== undefined && workflowId !== null) {
            queryParameters = queryParameters.set('workflowId', <any>workflowId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('description', <any>description);
        }
        if (automaticRestart !== undefined && automaticRestart !== null) {
            queryParameters = queryParameters.set('automaticRestart', <any>automaticRestart);
        }
        if (xmlStream !== undefined && xmlStream !== null) {
            queryParameters = queryParameters.set('xmlStream', <any>xmlStream);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/updateWorkflow`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param workflowStatusId 
     * @param workflowId 
     * @param name 
     * @param successorId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateWorkflowStatus(sessionId?: string, workflowStatusId?: number, workflowId?: number, name?: string, successorId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateWorkflowStatus(sessionId?: string, workflowStatusId?: number, workflowId?: number, name?: string, successorId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateWorkflowStatus(sessionId?: string, workflowStatusId?: number, workflowId?: number, name?: string, successorId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateWorkflowStatus(sessionId?: string, workflowStatusId?: number, workflowId?: number, name?: string, successorId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (workflowStatusId !== undefined && workflowStatusId !== null) {
            queryParameters = queryParameters.set('workflowStatusId', <any>workflowStatusId);
        }
        if (workflowId !== undefined && workflowId !== null) {
            queryParameters = queryParameters.set('workflowId', <any>workflowId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (successorId !== undefined && successorId !== null) {
            queryParameters = queryParameters.set('successorId', <any>successorId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/studio/updateWorkflowStatus`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
