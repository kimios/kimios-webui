/**
 * Kimios API
 * Kimios Sample API
 *
 * OpenAPI spec version: 1.2.2-SNAPSHOT - 0e4caa5c6f07ea69fb28705b90f227cac1cd6682
 * Contact: documentation@kimios.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AuthenticationSource } from '../model/authenticationSource';
import { Document } from '../model/document';
import { Group } from '../model/group';
import { Role } from '../model/role';
import { Session } from '../model/session';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AdministrationService {

    protected basePath = 'http://localhost/rest/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sessionId 
     * @param uid 
     * @param gid 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addUserToGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addUserToGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addUserToGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addUserToGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }
        if (gid !== undefined && gid !== null) {
            queryParameters = queryParameters.set('gid', <any>gid);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/addUserToGroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param userName 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changeOwnership(sessionId?: string, dmEntityId?: number, userName?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public changeOwnership(sessionId?: string, dmEntityId?: number, userName?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public changeOwnership(sessionId?: string, dmEntityId?: number, userName?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public changeOwnership(sessionId?: string, dmEntityId?: number, userName?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/changeOwnership`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param documentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public clearLock(sessionId?: string, documentId?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public clearLock(sessionId?: string, documentId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public clearLock(sessionId?: string, documentId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public clearLock(sessionId?: string, documentId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (documentId !== undefined && documentId !== null) {
            queryParameters = queryParameters.set('documentId', <any>documentId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/clearLock`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param name 
     * @param className 
     * @param enableSso 
     * @param enableMailCheck 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAuthenticationSource(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAuthenticationSource(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAuthenticationSource(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAuthenticationSource(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }
        if (enableSso !== undefined && enableSso !== null) {
            queryParameters = queryParameters.set('enableSso', <any>enableSso);
        }
        if (enableMailCheck !== undefined && enableMailCheck !== null) {
            queryParameters = queryParameters.set('enableMailCheck', <any>enableMailCheck);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/administration/createAuthenticationSource`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param name 
     * @param className 
     * @param enableSso 
     * @param enableMailCheck 
     * @param xmlParameters 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createAuthenticationSource_1(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createAuthenticationSource_1(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createAuthenticationSource_1(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createAuthenticationSource_1(sessionId?: string, name?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }
        if (enableSso !== undefined && enableSso !== null) {
            queryParameters = queryParameters.set('enableSso', <any>enableSso);
        }
        if (enableMailCheck !== undefined && enableMailCheck !== null) {
            queryParameters = queryParameters.set('enableMailCheck', <any>enableMailCheck);
        }
        if (xmlParameters !== undefined && xmlParameters !== null) {
            queryParameters = queryParameters.set('xmlParameters', <any>xmlParameters);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/createAuthenticationSourceFromXml`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param gid 
     * @param name 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (gid !== undefined && gid !== null) {
            queryParameters = queryParameters.set('gid', <any>gid);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/createGroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param role 
     * @param userName 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/createRole`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param uid 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param mail 
     * @param password 
     * @param authenticationSourceName 
     * @param enabled 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {










        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('firstName', <any>firstName);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('lastName', <any>lastName);
        }
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('phoneNumber', <any>phoneNumber);
        }
        if (mail !== undefined && mail !== null) {
            queryParameters = queryParameters.set('mail', <any>mail);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }
        if (enabled !== undefined && enabled !== null) {
            queryParameters = queryParameters.set('enabled', <any>enabled);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/createUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param className 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAuthenticationSource(sessionId?: string, className?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAuthenticationSource(sessionId?: string, className?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAuthenticationSource(sessionId?: string, className?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAuthenticationSource(sessionId?: string, className?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/deleteAuthenticationSource`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param gid 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (gid !== undefined && gid !== null) {
            queryParameters = queryParameters.set('gid', <any>gid);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/deleteGroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param role 
     * @param userName 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteRole(sessionId?: string, role?: number, userName?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/deleteRole`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param uid 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteUser(sessionId?: string, uid?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteUser(sessionId?: string, uid?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteUser(sessionId?: string, uid?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteUser(sessionId?: string, uid?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/deleteUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public disableServiceLogging(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public disableServiceLogging(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public disableServiceLogging(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public disableServiceLogging(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/disableServiceLogging`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public enableServiceLogging(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public enableServiceLogging(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public enableServiceLogging(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public enableServiceLogging(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/enableServiceLogging`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllEnabledSessions(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Session>>;
    public getAllEnabledSessions(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Session>>>;
    public getAllEnabledSessions(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Session>>>;
    public getAllEnabledSessions(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Session>>(`${this.basePath}/administration/getAllEnabledSessions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param name 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthenticationSource(sessionId?: string, name?: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticationSource>;
    public getAuthenticationSource(sessionId?: string, name?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticationSource>>;
    public getAuthenticationSource(sessionId?: string, name?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticationSource>>;
    public getAuthenticationSource(sessionId?: string, name?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<AuthenticationSource>(`${this.basePath}/administration/getAuthenticationSource`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param name 
     * @param className 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthenticationSourceParams(sessionId?: string, name?: string, className?: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public getAuthenticationSourceParams(sessionId?: string, name?: string, className?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public getAuthenticationSourceParams(sessionId?: string, name?: string, className?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public getAuthenticationSourceParams(sessionId?: string, name?: string, className?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: string; }>(`${this.basePath}/administration/getAuthenticationSourceParams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param name 
     * @param className 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthenticationSourceParamsXml(sessionId?: string, name?: string, className?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAuthenticationSourceParamsXml(sessionId?: string, name?: string, className?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAuthenticationSourceParamsXml(sessionId?: string, name?: string, className?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAuthenticationSourceParamsXml(sessionId?: string, name?: string, className?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/administration/getAuthenticationSourceParamsXml`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param className 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableAuthenticationSourceParams(sessionId?: string, className?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getAvailableAuthenticationSourceParams(sessionId?: string, className?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getAvailableAuthenticationSourceParams(sessionId?: string, className?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getAvailableAuthenticationSourceParams(sessionId?: string, className?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/administration/getAvailableAuthenticationSourceParams`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param className 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableAuthenticationSourceParamsXml(sessionId?: string, className?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAvailableAuthenticationSourceParamsXml(sessionId?: string, className?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAvailableAuthenticationSourceParamsXml(sessionId?: string, className?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAvailableAuthenticationSourceParamsXml(sessionId?: string, className?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/administration/getAvailableAuthenticationSourceParamsXml`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableAuthenticationSourceXml(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getAvailableAuthenticationSourceXml(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getAvailableAuthenticationSourceXml(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getAvailableAuthenticationSourceXml(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/administration/getAvailableAuthenticationSource`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAvailableAuthenticationSources(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<string>>;
    public getAvailableAuthenticationSources(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<string>>>;
    public getAvailableAuthenticationSources(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<string>>>;
    public getAvailableAuthenticationSources(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<string>>(`${this.basePath}/administration/available-domain-types`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCheckedOutDocuments(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Document>>;
    public getCheckedOutDocuments(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Document>>>;
    public getCheckedOutDocuments(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Document>>>;
    public getCheckedOutDocuments(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Document>>(`${this.basePath}/administration/getCheckedOutDocuments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConnectedUsers(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getConnectedUsers(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getConnectedUsers(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getConnectedUsers(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/administration/getConnectedUsers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userName 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Session>>;
    public getEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Session>>>;
    public getEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Session>>>;
    public getEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Session>>(`${this.basePath}/administration/getEnabledSessions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param gid 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getManageableGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<Group>;
    public getManageableGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Group>>;
    public getManageableGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Group>>;
    public getManageableGroup(sessionId?: string, gid?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (gid !== undefined && gid !== null) {
            queryParameters = queryParameters.set('gid', <any>gid);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Group>(`${this.basePath}/administration/getManageableGroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userId 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getManageableGroups(sessionId?: string, userId?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Group>>;
    public getManageableGroups(sessionId?: string, userId?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Group>>>;
    public getManageableGroups(sessionId?: string, userId?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Group>>>;
    public getManageableGroups(sessionId?: string, userId?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Group>>(`${this.basePath}/administration/getManageableGroups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getManageableUser(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getManageableUser(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getManageableUser(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getManageableUser(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.basePath}/administration/getManageableUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param gid 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getManageableUsers(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getManageableUsers(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getManageableUsers(sessionId?: string, gid?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getManageableUsers(sessionId?: string, gid?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (gid !== undefined && gid !== null) {
            queryParameters = queryParameters.set('gid', <any>gid);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/administration/getManageableUsers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReindexProgress(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<number>;
    public getReindexProgress(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<number>>;
    public getReindexProgress(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<number>>;
    public getReindexProgress(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<number>(`${this.basePath}/administration/getReindexProgress`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param role 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRoles(sessionId?: string, role?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Role>>;
    public getRoles(sessionId?: string, role?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Role>>>;
    public getRoles(sessionId?: string, role?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Role>>>;
    public getRoles(sessionId?: string, role?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (role !== undefined && role !== null) {
            queryParameters = queryParameters.set('role', <any>role);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Role>>(`${this.basePath}/administration/getRoles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userId 
     * @param userSource 
     * @param attributeName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public getUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public getUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public getUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }
        if (attributeName !== undefined && attributeName !== null) {
            queryParameters = queryParameters.set('attributeName', <any>attributeName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<string>(`${this.basePath}/administration/getUserAttribute`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userSource 
     * @param attributeName 
     * @param attributeValue 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserByAttribute(sessionId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getUserByAttribute(sessionId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getUserByAttribute(sessionId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getUserByAttribute(sessionId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }
        if (attributeName !== undefined && attributeName !== null) {
            queryParameters = queryParameters.set('attributeName', <any>attributeName);
        }
        if (attributeValue !== undefined && attributeValue !== null) {
            queryParameters = queryParameters.set('attributeValue', <any>attributeValue);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.basePath}/administration/getUserByAttribute`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userName 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserRoles(sessionId?: string, userName?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Role>>;
    public getUserRoles(sessionId?: string, userName?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Role>>>;
    public getUserRoles(sessionId?: string, userName?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Role>>>;
    public getUserRoles(sessionId?: string, userName?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Role>>(`${this.basePath}/administration/getUserRoles`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public listLoggers(observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public listLoggers(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public listLoggers(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public listLoggers(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<{ [key: string]: string; }>(`${this.basePath}/administration/listLoggers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param path 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reindex(sessionId?: string, path?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reindex(sessionId?: string, path?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reindex(sessionId?: string, path?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reindex(sessionId?: string, path?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (path !== undefined && path !== null) {
            queryParameters = queryParameters.set('path', <any>path);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/reindex`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param sessionIdToRemove 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeEnabledSession(sessionId?: string, sessionIdToRemove?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeEnabledSession(sessionId?: string, sessionIdToRemove?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeEnabledSession(sessionId?: string, sessionIdToRemove?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeEnabledSession(sessionId?: string, sessionIdToRemove?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (sessionIdToRemove !== undefined && sessionIdToRemove !== null) {
            queryParameters = queryParameters.set('sessionIdToRemove', <any>sessionIdToRemove);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/removeEnabledSession`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userName 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeEnabledSessions(sessionId?: string, userName?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userName !== undefined && userName !== null) {
            queryParameters = queryParameters.set('userName', <any>userName);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/removeEnabledSessions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param uid 
     * @param gid 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeUserFromGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeUserFromGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeUserFromGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeUserFromGroup(sessionId?: string, uid?: string, gid?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }
        if (gid !== undefined && gid !== null) {
            queryParameters = queryParameters.set('gid', <any>gid);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/removeUserFromGroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param loggerName 
     * @param loggerLevel 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setLoggerLevel(loggerName?: string, loggerLevel?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setLoggerLevel(loggerName?: string, loggerLevel?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setLoggerLevel(loggerName?: string, loggerLevel?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setLoggerLevel(loggerName?: string, loggerLevel?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (loggerName !== undefined && loggerName !== null) {
            queryParameters = queryParameters.set('loggerName', <any>loggerName);
        }
        if (loggerLevel !== undefined && loggerLevel !== null) {
            queryParameters = queryParameters.set('loggerLevel', <any>loggerLevel);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/setLoggerLevel`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userId 
     * @param userSource 
     * @param attributeName 
     * @param attributeValue 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setUserAttribute(sessionId?: string, userId?: string, userSource?: string, attributeName?: string, attributeValue?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }
        if (attributeName !== undefined && attributeName !== null) {
            queryParameters = queryParameters.set('attributeName', <any>attributeName);
        }
        if (attributeValue !== undefined && attributeValue !== null) {
            queryParameters = queryParameters.set('attributeValue', <any>attributeValue);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/setUserAttribute`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param currentName 
     * @param className 
     * @param enableSso 
     * @param enableMailCheck 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAuthenticationSource(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAuthenticationSource(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAuthenticationSource(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAuthenticationSource(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (currentName !== undefined && currentName !== null) {
            queryParameters = queryParameters.set('currentName', <any>currentName);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }
        if (enableSso !== undefined && enableSso !== null) {
            queryParameters = queryParameters.set('enableSso', <any>enableSso);
        }
        if (enableMailCheck !== undefined && enableMailCheck !== null) {
            queryParameters = queryParameters.set('enableMailCheck', <any>enableMailCheck);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/administration/updateAuthenticationSource`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param currentName 
     * @param className 
     * @param enableSso 
     * @param enableMailCheck 
     * @param xmlParameters 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAuthenticationSource_2(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAuthenticationSource_2(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAuthenticationSource_2(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAuthenticationSource_2(sessionId?: string, currentName?: string, className?: string, enableSso?: boolean, enableMailCheck?: boolean, xmlParameters?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (currentName !== undefined && currentName !== null) {
            queryParameters = queryParameters.set('currentName', <any>currentName);
        }
        if (className !== undefined && className !== null) {
            queryParameters = queryParameters.set('className', <any>className);
        }
        if (enableSso !== undefined && enableSso !== null) {
            queryParameters = queryParameters.set('enableSso', <any>enableSso);
        }
        if (enableMailCheck !== undefined && enableMailCheck !== null) {
            queryParameters = queryParameters.set('enableMailCheck', <any>enableMailCheck);
        }
        if (xmlParameters !== undefined && xmlParameters !== null) {
            queryParameters = queryParameters.set('xmlParameters', <any>xmlParameters);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/updateAuthenticationSourceFromXml`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param gid 
     * @param name 
     * @param authenticationSourceName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateGroup(sessionId?: string, gid?: string, name?: string, authenticationSourceName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (gid !== undefined && gid !== null) {
            queryParameters = queryParameters.set('gid', <any>gid);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/updateGroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param uid 
     * @param firstName 
     * @param lastName 
     * @param phoneNumber 
     * @param mail 
     * @param password 
     * @param authenticationSourceName 
     * @param enabled 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUser(sessionId?: string, uid?: string, firstName?: string, lastName?: string, phoneNumber?: string, mail?: string, password?: string, authenticationSourceName?: string, enabled?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {










        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }
        if (firstName !== undefined && firstName !== null) {
            queryParameters = queryParameters.set('firstName', <any>firstName);
        }
        if (lastName !== undefined && lastName !== null) {
            queryParameters = queryParameters.set('lastName', <any>lastName);
        }
        if (phoneNumber !== undefined && phoneNumber !== null) {
            queryParameters = queryParameters.set('phoneNumber', <any>phoneNumber);
        }
        if (mail !== undefined && mail !== null) {
            queryParameters = queryParameters.set('mail', <any>mail);
        }
        if (password !== undefined && password !== null) {
            queryParameters = queryParameters.set('password', <any>password);
        }
        if (authenticationSourceName !== undefined && authenticationSourceName !== null) {
            queryParameters = queryParameters.set('authenticationSourceName', <any>authenticationSourceName);
        }
        if (enabled !== undefined && enabled !== null) {
            queryParameters = queryParameters.set('enabled', <any>enabled);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/administration/updateUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param uid 
     * @param authenticationSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateUserEmails(sessionId?: string, uid?: string, authenticationSource?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateUserEmails(sessionId?: string, uid?: string, authenticationSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateUserEmails(sessionId?: string, uid?: string, authenticationSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateUserEmails(sessionId?: string, uid?: string, authenticationSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (uid !== undefined && uid !== null) {
            queryParameters = queryParameters.set('uid', <any>uid);
        }
        if (authenticationSource !== undefined && authenticationSource !== null) {
            queryParameters = queryParameters.set('authenticationSource', <any>authenticationSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<any>(`${this.basePath}/administration/updateUserEmails`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
