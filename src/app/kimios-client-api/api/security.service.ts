/**
 * Kimios API
 * Kimios Sample API
 *
 * OpenAPI spec version: 1.2.2-SNAPSHOT - 282608d038dbfdf7754fa4e049f180f36e0f635a
 * Contact: documentation@kimios.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AuthenticationSource } from '../model/authenticationSource';
import { DMEntitySecurity } from '../model/dMEntitySecurity';
import { Group } from '../model/group';
import { SecurityEntity } from '../model/securityEntity';
import { TaskInfo } from '../model/taskInfo';
import { User } from '../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SecurityService {

    protected basePath = 'http://localhost/rest/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canCreateWorkspace(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public canCreateWorkspace(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public canCreateWorkspace(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public canCreateWorkspace(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/canCreateWorkspace`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canRead(sessionId?: string, dmEntityId?: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public canRead(sessionId?: string, dmEntityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public canRead(sessionId?: string, dmEntityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public canRead(sessionId?: string, dmEntityId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/canRead`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public canWrite(sessionId?: string, dmEntityId?: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public canWrite(sessionId?: string, dmEntityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public canWrite(sessionId?: string, dmEntityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public canWrite(sessionId?: string, dmEntityId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/canWrite`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * End Kimios Session
     * Start Kimios Session
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public endSession(sessionId: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public endSession(sessionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public endSession(sessionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public endSession(sessionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sessionId === null || sessionId === undefined) {
            throw new Error('Required parameter sessionId was null or undefined when calling endSession.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: any | { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (sessionId !== undefined) {
            formParams = formParams.append('sessionId', <any>sessionId) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/security/endSession`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthenticationSources(observe?: 'body', reportProgress?: boolean): Observable<Array<AuthenticationSource>>;
    public getAuthenticationSources(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AuthenticationSource>>>;
    public getAuthenticationSources(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AuthenticationSource>>>;
    public getAuthenticationSources(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<AuthenticationSource>>(`${this.basePath}/security/getAuthenticationSources`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDMEntitySecurities(sessionId?: string, dmEntityId?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<DMEntitySecurity>>;
    public getDMEntitySecurities(sessionId?: string, dmEntityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DMEntitySecurity>>>;
    public getDMEntitySecurities(sessionId?: string, dmEntityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DMEntitySecurity>>>;
    public getDMEntitySecurities(sessionId?: string, dmEntityId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DMEntitySecurity>>(`${this.basePath}/security/getDMEntitySecurities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param objectType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDefaultDMEntitySecurities(sessionId?: string, objectType?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DMEntitySecurity>>;
    public getDefaultDMEntitySecurities(sessionId?: string, objectType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DMEntitySecurity>>>;
    public getDefaultDMEntitySecurities(sessionId?: string, objectType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DMEntitySecurity>>>;
    public getDefaultDMEntitySecurities(sessionId?: string, objectType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (objectType !== undefined && objectType !== null) {
            queryParameters = queryParameters.set('objectType', <any>objectType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<DMEntitySecurity>>(`${this.basePath}/security/getDefaultDMEntitySecurities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param groupId 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroup(sessionId?: string, groupId?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<Group>;
    public getGroup(sessionId?: string, groupId?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Group>>;
    public getGroup(sessionId?: string, groupId?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Group>>;
    public getGroup(sessionId?: string, groupId?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Group>(`${this.basePath}/security/getGroup`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getGroups(sessionId?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Group>>;
    public getGroups(sessionId?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Group>>>;
    public getGroups(sessionId?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Group>>>;
    public getGroups(sessionId?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Group>>(`${this.basePath}/security/getGroups`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUser(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<User>;
    public getUser(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<User>>;
    public getUser(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<User>>;
    public getUser(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<User>(`${this.basePath}/security/getUser`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param userSource 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(sessionId?: string, userSource?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<User>>;
    public getUsers(sessionId?: string, userSource?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<User>>>;
    public getUsers(sessionId?: string, userSource?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<User>>>;
    public getUsers(sessionId?: string, userSource?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<User>>(`${this.basePath}/security/getUsers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param dmEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hasFullAccess(sessionId?: string, dmEntityId?: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public hasFullAccess(sessionId?: string, dmEntityId?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public hasFullAccess(sessionId?: string, dmEntityId?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public hasFullAccess(sessionId?: string, dmEntityId?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (dmEntityId !== undefined && dmEntityId !== null) {
            queryParameters = queryParameters.set('dmEntityId', <any>dmEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/hasFullAccess`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hasReportingAccess(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public hasReportingAccess(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public hasReportingAccess(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public hasReportingAccess(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/hasReportingAccess`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public hasStudioAccess(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public hasStudioAccess(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public hasStudioAccess(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public hasStudioAccess(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/hasStudioAccess`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isAdmin(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isAdmin(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isAdmin(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isAdmin(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/isAdmin`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public isSessionAlive(sessionId?: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public isSessionAlive(sessionId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public isSessionAlive(sessionId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public isSessionAlive(sessionId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/security/isSessionAlive`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param searchText 
     * @param userSource 
     * @param entType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchSecurityEntities(sessionId?: string, searchText?: string, userSource?: string, entType?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<SecurityEntity>>;
    public searchSecurityEntities(sessionId?: string, searchText?: string, userSource?: string, entType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SecurityEntity>>>;
    public searchSecurityEntities(sessionId?: string, searchText?: string, userSource?: string, entType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SecurityEntity>>>;
    public searchSecurityEntities(sessionId?: string, searchText?: string, userSource?: string, entType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (sessionId !== undefined && sessionId !== null) {
            queryParameters = queryParameters.set('sessionId', <any>sessionId);
        }
        if (searchText !== undefined && searchText !== null) {
            queryParameters = queryParameters.set('searchText', <any>searchText);
        }
        if (userSource !== undefined && userSource !== null) {
            queryParameters = queryParameters.set('userSource', <any>userSource);
        }
        if (entType !== undefined && entType !== null) {
            queryParameters = queryParameters.set('entType', <any>entType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<SecurityEntity>>(`${this.basePath}/security/search-entities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start Kimios Session
     * Start Kimios Session
     * @param userName 
     * @param userSource 
     * @param password 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startSession(userName: string, userSource: string, password: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public startSession(userName: string, userSource: string, password: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public startSession(userName: string, userSource: string, password: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public startSession(userName: string, userSource: string, password: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userName === null || userName === undefined) {
            throw new Error('Required parameter userName was null or undefined when calling startSession.');
        }

        if (userSource === null || userSource === undefined) {
            throw new Error('Required parameter userSource was null or undefined when calling startSession.');
        }

        if (password === null || password === undefined) {
            throw new Error('Required parameter password was null or undefined when calling startSession.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: any | { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (userName !== undefined) {
            formParams = formParams.append('userName', <any>userName) || formParams;
        }
        if (userSource !== undefined) {
            formParams = formParams.append('userSource', <any>userSource) || formParams;
        }
        if (password !== undefined) {
            formParams = formParams.append('password', <any>password) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/security/startSession`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start Kimios Session from an external Token
     * Start Kimios Session from an external Token
     * @param externalToken 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public startSessionWithToken(externalToken: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public startSessionWithToken(externalToken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public startSessionWithToken(externalToken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public startSessionWithToken(externalToken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (externalToken === null || externalToken === undefined) {
            throw new Error('Required parameter externalToken was null or undefined when calling startSessionWithToken.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: any | { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (externalToken !== undefined) {
            formParams = formParams.append('externalToken', <any>externalToken) || formParams;
        }

        return this.httpClient.post<string>(`${this.basePath}/security/startSessionWithToken`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDMEntitySecurities(observe?: 'body', reportProgress?: boolean): Observable<TaskInfo>;
    public updateDMEntitySecurities(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskInfo>>;
    public updateDMEntitySecurities(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskInfo>>;
    public updateDMEntitySecurities(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<TaskInfo>(`${this.basePath}/security/update-security`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDMEntitySecurities_1(observe?: 'body', reportProgress?: boolean): Observable<TaskInfo>;
    public updateDMEntitySecurities_1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<TaskInfo>>;
    public updateDMEntitySecurities_1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<TaskInfo>>;
    public updateDMEntitySecurities_1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<TaskInfo>(`${this.basePath}/security/updateDMEntitySecurities`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param sessionId 
     * @param xmlStream 
     * @param objectType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateDefaultDMEntitySecurities(sessionId?: string, xmlStream?: string, objectType?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateDefaultDMEntitySecurities(sessionId?: string, xmlStream?: string, objectType?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateDefaultDMEntitySecurities(sessionId?: string, xmlStream?: string, objectType?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateDefaultDMEntitySecurities(sessionId?: string, xmlStream?: string, objectType?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: any | { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (sessionId !== undefined) {
            formParams = formParams.append('sessionId', <any>sessionId) || formParams;
        }
        if (xmlStream !== undefined) {
            formParams = formParams.append('xmlStream', <any>xmlStream) || formParams;
        }
        if (objectType !== undefined) {
            formParams = formParams.append('objectType', <any>objectType) || formParams;
        }

        return this.httpClient.post<any>(`${this.basePath}/security/updateDefaultDMEntitySecurities`,
            convertFormParamsToString ? formParams.toString() : formParams,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
